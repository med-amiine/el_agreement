const gtv = require("../../src/gtv");

const assert = require('chai').assert;
const expect = require('chai').expect;
const gtxU = require('../../src/gtx/gtx');

var sigs = require('../signatures');
var sig = sigs.sig;
var signatures = sigs.signatures;
var signers = sigs.signers;
const blockchainRID = Buffer.from("DEADBEEF94");

describe("check gtx signature", () => {
    function test(txHash, gtx) {
        console.log("GTX", gtx);
        const checkResult = gtxU.checkGTXSignatures(txHash, gtx);
        console.log("RESULT", checkResult);
        assert.deepEqual(checkResult, true);
    }

    function testFail(txHash, gtx) {
        const checkResult = gtxU.checkGTXSignatures(txHash, gtx);
        assert.deepEqual(checkResult, false)
    }

    function tx(calls, signers, signaturesCount) {
        const tx = {blockchainRID, operations: calls, signers};
        console.log("THE TX", tx);
        for(let i=0; i<signaturesCount; i++) {
            const signer = sig(i);
            gtxU.sign(signer.privKey, signer.pubKey, tx);
        }

        if(!tx.signatures) tx.signatures = [];
        return tx;
    }

    it('empty call should be ok', () => {
        const aTx = tx( [], [], 0);
        const txHash = gtxU.getDigestToSign(aTx);
        test(txHash, aTx);
    });

    it('empty call with one signature', () => {
        const aTx = tx( [], [], signatures(1));
        const txHash = gtxU.getDigestToSign(aTx);
        test(txHash, aTx);
    });

    it('single call with no param, one signature and no signers', () => {
        const aTx = tx([{opName: 'func1åäö', args: []}], [], 0);
        const txHash = gtxU.getDigestToSign(aTx);
        test(txHash, aTx);
    });

    it('single call with not enough signatures FAILS', () => {
        const aTx = tx([{opName: 'func1åäö', args: []}], signers(2), 1);
        const txHash = gtxU.getDigestToSign(aTx);
        const checkResult = () => gtxU.checkGTXSignatures(txHash, aTx);
        expect(checkResult).to.throw();
    });

    it('single call with enough signatueres works', () => {
        const aTx = tx([{opName: 'func1åääö', args: []}], signers(1), 1);
        const txHash = gtxU.getDigestToSign(aTx);
        test(txHash, aTx);
    });

    it('single call with enough multiple signatures work', () => {
        const aTx = tx([{opName: 'func1åääö', args: []}], signers(2), 2);
        const txHash = gtxU.getDigestToSign(aTx);
        test(txHash, aTx)
    });

    it('multiple calls with enought multiple signatures work', () => {
        const aTx = tx([{opName: 'func1åääö', args: []}, {opName: 'guess_the_function', args: ['John Doe', 2222]}], signers(3), 3);
        const txHash = gtxU.getDigestToSign(aTx);
        test(txHash, aTx)
    });
});

